---
title: "Untitled"
format: html
---

## Analysis of neutrophil subsets after lipid treatment

```{r}
library(CATALYST)
library(harmony)
library(cowplot)
library(flowCore)
library(scater)
library(SingleCellExperiment)
library(viridis)
library(RColorBrewer)
library(ggforce)
library(ggplot2)
library(ggrepel)
library(ggsci)
library(data.table)
library(emmeans)
library(dplyr)
library(tidyr)
library(ggsignif)
library(rstatix)
library(multcomp)
library(scales)
library(ggthemes)
library(slingshot)
library(ggbeeswarm)
library(ggbreak)
library(DescTools)
library(pak)
library(gghighlight)
library(scattermore)
library(clustree)
library(gridExtra)
library(patchwork)
library(ggbump)
library(stringr)
```

```{r}
setwd("C:/Users/dan94/OneDrive - University College London/UCL_Senior_Research_Fellow/Neutrophil_lipids/GSK_3uM_updated/")
```

## load in FCS files and create flowset object

### list fcs files in folder, choose ones required and then run read.flowset

```{r}
fcs <- list.files(pattern = ".fcs$")
fcs
fs <- read.flowSet(fcs, transformation = F, truncate_max_range = F)
```

## check columns (fluorophores)
## remove any not needed
## when running for the first time, save the columns into an excel to form the basis of the fluorophore metadata
## if this has been created before, just load it in

```{r}
all_cols <- colnames(fs)
all_cols
fs <- fs[,-c(1,2)]
colnames(fs)
cols <- colnames(fs)
cols <- as.data.frame(cols)
#write.csv(cols, file = "Marker.metadata.csv")
markers <- read.csv("Marker.metadata.csv")
markers
```

## use the file names as the basis for the sample metadata
## first add a column to make the sample id (removes excess characters at end of each fcs file name)
## use separate to add individual metadata features
## if script run previously then just load it in
```{r}
names <- data.frame(fcs)
sample_df <- names %>% mutate(sample_id = str_sub(fcs, 1, -24))
sample_df <- separate(sample_df, col = sample_id, into = c("donor", "treatment", "time"), remove = F)
write.csv(sample_df, file = "sample.metadata.csv")
samples <- read.csv("sample.metadata.csv")
```

## check channels from the flowest and markers metadata match
## make the singlecellexperiment object - here is where you set your cofactor values
### these can be assessed afterwards and this part can be re-done until the settings look correct
```{r}
setdiff(colnames(fs), markers$fluorophore)
setdiff(fcs, samples$fcs)

sce.custom <- prepData(x = fs, panel = markers, md = samples, FACS = T, transform = T, 
  cofactor = c("AF700-A" = 1000, "APC-A" = 1000, "APC-H7-A" = 1000, "BUV395-A" = 1000,        "BUV496-A" = 1000, "BUV563-A" = 1000, "BUV615-A" = 1000, "BUV737-A" = 1000, "BUV805-A" = 1000, "BV421-A" = 1000, "BV480-A" = 1000, "BV510-A" = 1000, "BV570-A" = 1000, "BV605-A" = 1000,     "BV785-A" = 1000, "FITC-A" = 1000, "PE-A" = 1000, "PacBlue-A" = 1000, "PerCP-Cy5.5-A" = 1000,  "SparkBlue-550-A" = 1000, "SparkYG-581-A" = 1000, "[Zombie UV]-A" = 1000), 
  panel_cols = list(channel = "fluorophore", antigen = "antigen"),
  md_cols = list(file = "fcs", id = "sample_id",
  factors = c("donor", "treatment", "time")))

table(sce.custom$donor)

plotExprs(sce.custom, color_by = "donor")
sce <- sce.custom
rm(sce.custom)
```

## downsample, as most of the time we have millions of cells
### not only computationaly limiting, but not really needed
### this function is from chatgpt, but seems to work well
```{r}
downsample <- function(sce, sample_col = "sample_id", proportion = 0.1, min_cells = 10) {
  # Get sample labels
  samples <- colData(sce)[[sample_col]]
  
  # For each sample, randomly select proportion of cells
  selected_cells <- unlist(lapply(unique(samples), function(s) {
    cells_in_sample <- which(samples == s)
    n <- max(round(length(cells_in_sample) * proportion), min_cells)  # enforce a minimum
    n <- min(length(cells_in_sample), n)  # avoid oversampling
    sample(cells_in_sample, n)
  }))
  
  # Subset the SCE to those cells
  sce_downsampled <- sce[, selected_cells]
  return(sce_downsampled)
}
numbers_before <- table(sce$sample_id)
sce <- downsample(sce, sample_col = "sample_id", proportion = 0.1)
numbers_after <- table(sce$sample_id)
```

## cluster, assess elbow plot
```{r}
set.seed(61)
sce <- CATALYST::cluster(sce, features = NULL, xdim = 10, ydim = 10, maxK = 30, verbose = T, seed = 61)

delta <- delta_area(sce)
delta <- delta$data
ggplot(delta, aes(x = k, y = y))+geom_point(size = 5)+geom_line(linewidth = 1.5)+
  theme_classic()+
  theme(axis.text = element_text(colour = "black", size = 18), 
        axis.title = element_text(size = 18, colour = "black"))+
  xlab("K (number of clusters)")+ylab("Relative change in \n area under CDF curve")
```

## create UMAP
```{r}
sce <- runDR(sce, "UMAP", features = NULL)
```